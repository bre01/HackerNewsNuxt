import {
  __commonJS
} from "./chunk-76J2PTFD.js";

// node_modules/.pnpm/unix-timestamp@1.0.3/node_modules/unix-timestamp/lib/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/.pnpm/unix-timestamp@1.0.3/node_modules/unix-timestamp/lib/timestamp.js"(exports, module) {
    var timestamp = module.exports = {};
    timestamp.Millisecond = 1e-3;
    timestamp.Second = 1;
    timestamp.Minute = 60;
    timestamp.Hour = 60 * timestamp.Minute;
    timestamp.Day = 24 * timestamp.Hour;
    timestamp.Week = 7 * timestamp.Day;
    timestamp.Month = 30.436875 * timestamp.Day;
    timestamp.Year = 12 * timestamp.Month;
    var OffsetRegExp = new RegExp("^\\s*([-+]?)\\s*" + ["y", "M", "w", "d", "h", "m", "s", "ms"].map(function(t) {
      return "(?:(\\d+)\\s*" + t + ")?";
    }).join("\\s*") + "\\s*$");
    var outputFn = dontRound;
    function dontRound(time) {
      return time;
    }
    function round(time) {
      return Math.round(time);
    }
    Object.defineProperty(timestamp, "round", {
      get: function() {
        return outputFn === round;
      },
      set: function(value) {
        outputFn = value ? round : dontRound;
      }
    });
    timestamp.now = function(offset) {
      const now = Date.now() / 1e3;
      return outputFn(offset ? timestamp.add(now, offset) : now);
    };
    timestamp.add = function(time, offset) {
      if (!isNumber(time)) {
        throw new Error("Time must be a number");
      }
      if (isString(offset)) {
        const matches = OffsetRegExp.exec(offset);
        if (!matches) {
          throw new Error("Expected offset string format: [+|-] [{years}y] [{months}M] [{weeks}w] [{days}d] [{hours}h] [{minutes}m] [{seconds}s] [{milliseconds}ms]");
        }
        offset = (matches[1] === "-" ? -1 : 1) * ((matches[2] || 0) * timestamp.Year + (matches[3] || 0) * timestamp.Month + (matches[4] || 0) * timestamp.Week + (matches[5] || 0) * timestamp.Day + (matches[6] || 0) * timestamp.Hour + (matches[7] || 0) * timestamp.Minute + (matches[8] || 0) * timestamp.Second + (matches[9] || 0) * timestamp.Millisecond);
      } else if (!isNumber(offset)) {
        throw new Error("Offset must be either a string or a number");
      }
      return outputFn(time + offset);
    };
    timestamp.duration = function(offset) {
      return timestamp.add(0, offset);
    };
    timestamp.fromDate = function(date) {
      if (isString(date)) {
        date = new Date(date);
      } else if (!isDate(date)) {
        throw new Error("Expected either a string or a date");
      }
      return outputFn(date.getTime() / 1e3);
    };
    timestamp.toDate = function(time) {
      if (!isNumber(time)) {
        throw new Error("Expected a number");
      }
      return new Date(time * 1e3);
    };
    function isString(value) {
      return typeof value === "string" || Object.prototype.toString.call(value) === "[object String]";
    }
    function isNumber(value) {
      return typeof value === "number" || Object.prototype.toString.call(value) === "[object Number]";
    }
    function isDate(value) {
      return Object.prototype.toString.call(value) === "[object Date]";
    }
  }
});
export default require_timestamp();
/*! Bundled license information:

unix-timestamp/lib/timestamp.js:
  (**
   * @license
   * [BSD-3-Clause](https://github.com/pryv/unix-timestamp-js/blob/master/LICENSE)
   *)
*/
//# sourceMappingURL=unix-timestamp.js.map
